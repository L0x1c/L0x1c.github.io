[{"content":"VAD_私有内存 私有内存 像malloc, virtualalloc申请的内存都是私有内存, MapViewofFile, MapViewOfSize, mdl, 这种是映射的内存\n这些内存是由一个叫做vadroot的节点来管理的, 可以看一下这个位置 这里如果后续想获取到这个位置的话, 因为每个版本的偏移可能不一样, 可以通过函数PsGetProcessExitStatus来获取对应的偏移 + 4就是vadRoot win10上的结构\n+0x658 VadRoot : _RTL_AVL_TREE +0x660 VadHint : 0xffff900f`4bf43e10 Void +0x668 VadCount : 0xde VadRoot: _RTL_AVL_TREE 里面就是代表了二叉搜索树的节点, 而里面的每个节点的结构都是__MMVAD的结构, VadHint多次查询的节点会放在这里, VadCount代表vad节点的个数\nkd\u0026gt; dt _RTL_AVL_TREE ffff900f4c129400+0x658 nt!_RTL_AVL_TREE +0x000 Root : 0xffff900f`4bf44810 _RTL_BALANCED_NODE kd\u0026gt; dt 0xffff900f`4bf44810 _RTL_BALANCED_NODE nt!_RTL_BALANCED_NODE +0x000 Children : [2] 0xffff900f`4b1dcb10 _RTL_BALANCED_NODE +0x000 Left : 0xffff900f`4b1dcb10 _RTL_BALANCED_NODE +0x008 Right : 0xffff900f`4bfe65c0 _RTL_BALANCED_NODE +0x010 Red : 0y0 +0x010 Balance : 0y00 +0x010 ParentValue : 0 !vad即可查询 其中start和End代表了开始和结束, 都需要乘上pagesize -\u0026gt; 0x1000其中end不一样(end + 1)*pagesize - 1, 里面的每一个节点都是_MMVAD的结构, 可以找一个私有内存看一下结构\nkd\u0026gt; dt _MMVAD ffff900f4bf449a0 nt!_MMVAD +0x000 Core : _MMVAD_SHORT +0x040 u2 : \u0026lt;anonymous-tag\u0026gt; +0x048 Subsection : 0x01dbdb86`7175af69 _SUBSECTION +0x050 FirstPrototypePte : (null) +0x058 LastContiguousPte : (null) +0x060 ViewLinks : _IST_ENTRY [ 0xffff900f`4bfe4540 - 0x00000026`00000020 ] +0x070 VadsProcess : (null) +0x078 u4 : \u0026lt;anonymous-tag\u0026gt; +0x080 FileObject : 0x00000004`00100200 _FILE_OBJECT kd\u0026gt; dt _MMVAD_SHORT ffff900f4bf449a0 nt!_MMVAD_SHORT +0x000 NextVad : 0xffff900f`4bfe4e00 _MMVAD_SHORT +0x008 ExtraCreateInfo : 0xffff900f`4bfe29c0 Void +0x000 VadNode : _RTL_BALANCED_NODE +0x018 StartingVpn : 0x160 +0x01c EndingVpn : 0x166 +0x020 StartingVpnHigh : 0 \u0026#39;\u0026#39; +0x021 c : 0 \u0026#39;\u0026#39; +0x022 CommitChargeHigh : 0 \u0026#39;\u0026#39; +0x023 SpareNT64VadUChar : 0 \u0026#39;\u0026#39; +0x024 ReferenceCount : 0n0 +0x028 PushLock : _EX_PUSH_LOCK +0x030 u : \u0026lt;anonymous-tag\u0026gt; +0x034 u1 : \u0026lt;anonymous-tag\u0026gt; +0x038 EventList : (null) 其中的__MMVAD_SHORT的前三个其实是union, 代表了下一个vad节点的地址, NextVad是左子树, ExtraCreateInfo是右子树\nStartingVpn, EndingVpn, StartingVpnHigh, StartingVpnHigh可以看一下MiLocateAddress的写法, win10会和win7有不同, 计算方式为(result-\u0026gt;Core.StartingVpn | ((unsigned __int64)result-\u0026gt;Core.StartingVpnHigh \u0026lt;\u0026lt; 32))和(result-\u0026gt;Core.EndingVpn | ((unsigned __int64)result-\u0026gt;Core.EndingVpnHigh \u0026lt;\u0026lt; 32)) 在_MMVAD_SHORT结构里有一项是u-\u0026gt;_MMVAD_FLAGS结构, 其中的PrivateMemory代表了这里是不是私有内存, Protection代表了属性是多少, vadtype用于标记这段虚拟内存的用途或分配方式 看一下这个vadtype\n值（十进制） 名称 含义说明 0 VadNone 未指定类型（保留） 1 VadDevicePhysicalMemory 映射的物理设备内存 2 VadImageMap 映像（如 EXE、DLL 文件）映射 3 VadAwe 使用 AWE（Address Windowing Extensions）分配的内存 4 VadWriteWatch 启用了写监视（Write-Watch）的内存，用于检测哪些页面被写入 5 VadLargePages 使用大页（Large Pages）分配的内存 6 VadRotatePhysical 映射旋转的物理内存（罕见） 7 VadLargePageSection 段式大页分配（仅在某些版本支持） 看一下这个Protection, 看一下NtAllocateVirtualMemory这个函数里关于Protection的字段可以很好的定位到MiMakeProtectionMask这个函数\n看一下这个函数, 可以发现他把这个申请的内存属性分成了两个属性, 也刚好的在两个表中\n我们可以举一个例子, 假设是PAGE_EXECUTE_READWRITE = 0x40\n那么根据代码的逻辑, 他会被分成两个部分, 0100 0000一个是4一个是0, 那么就会在这个表中找一下, 因为第一个是0所以要直接在第二个表中找一下属性, 可以看到数组的第五个刚好是MM_EXECUTE_READWRITE 所以我们上面内存这个位置是0x4, 所以属性就是MM_READWRITE\n写了三个功能:\n1.打开IDA分析内核MiLocateAddress这个函数, 给一个R3地址, 返回一个VAD节点\n2.给一个进程ID, 解析出此进程的所有VAD节点\n3.移除内存所在vad节点的位置\n#include \u0026#34;struct.h\u0026#34; void RtlAvlRemoveNode(PVOID tree, PVOID node); PEPROCESS LookUpProcess(HANDLE Pid) { PEPROCESS eprocess = NULL; NTSTATUS Status = STATUS_UNSUCCESSFUL; Status = PsLookupProcessByProcessId(Pid, \u0026amp;eprocess); if (NT_SUCCESS(Status)) return eprocess; return NULL; } ULONG64 GetVadOffset() { UNICODE_STRING func; RtlInitUnicodeString(\u0026amp;func, L\u0026#34;PsGetProcessExitStatus\u0026#34;); ULONG64 funcAddr = MmGetSystemRoutineAddress(\u0026amp;func); if (funcAddr == NULL) { return FALSE; } //8B 81 D4 07 00 00 mov eax, [rcx+7D4h] PUCHAR funcBytes = (PUCHAR)funcAddr; //DbgPrint(\u0026#34;funcAddr : %p\\n\u0026#34;, funcAddr); //DbgPrint(\u0026#34;funcBytes : %p\\n\u0026#34;, funcBytes); for (size_t i = 0; i \u0026lt; 0x10; i++) { if (funcBytes[0] == 0x8B \u0026amp;\u0026amp; funcBytes[1] == 0x81) { UINT32 offset = *(UINT32*)(funcBytes + 2); return offset + 0x4; } } return FALSE; } PMMVAD MiLocateAddress(PEPROCESS eProcess, ULONG64 virtualAddress) { PRTL_AVL_TREE vadRoot = (PRTL_AVL_TREE)((PUCHAR)eProcess + GetVadOffset()); if (!vadRoot || !vadRoot-\u0026gt;Root) { return NULL; // VAD tree is empty or invalid } PMMVAD vad = (PMMVAD)vadRoot-\u0026gt;Root; if (!MmIsAddressValid(vad)) { return NULL; } ULONG64 address = virtualAddress \u0026gt;\u0026gt; 12; if (address \u0026lt; (vad-\u0026gt;Core.StartingVpn | (vad-\u0026gt;Core.StartingVpnHigh \u0026lt;\u0026lt; 32)) || address \u0026gt;(vad-\u0026gt;Core.EndingVpn | (vad-\u0026gt;Core.EndingVpn \u0026lt;\u0026lt; 32))) { while (vad) { if (address \u0026gt; (vad-\u0026gt;Core.EndingVpn | (vad-\u0026gt;Core.EndingVpnHigh \u0026lt;\u0026lt; 32))) { vad = (PMMVAD)vad-\u0026gt;Core.VadNode.Right; } else { if (address \u0026gt;= (vad-\u0026gt;Core.StartingVpn | (vad-\u0026gt;Core.StartingVpnHigh \u0026lt;\u0026lt; 32))) { return vad; } vad = (PMMVAD)vad-\u0026gt;Core.VadNode.Left; } } } return NULL; } PVOID EnumVad(PMMVAD vad) { if (!vad) { return NULL; } PVOID stack[256]; int stackIndex = 0; stack[stackIndex++] = vad; while (stackIndex \u0026gt; 0) { PMMVAD currentVad = (PMMVAD)stack[--stackIndex]; DbgPrintEx(77, 0, \u0026#34;Vad: %p | start : %x | end : %x | vadflags : %x \\n\u0026#34;, currentVad, currentVad-\u0026gt;Core.StartingVpn, currentVad-\u0026gt;Core.EndingVpn, currentVad-\u0026gt;Core.u.VadFlags); if (currentVad-\u0026gt;Core.VadNode.Right) { stack[stackIndex++] = (PVOID)currentVad-\u0026gt;Core.VadNode.Right; } if (currentVad-\u0026gt;Core.VadNode.Left) { stack[stackIndex++] = (PVOID)currentVad-\u0026gt;Core.VadNode.Left; } } return NULL; } PVOID ParserProcessVad(PEPROCESS eProcess) { PRTL_AVL_TREE vadRoot = (PRTL_AVL_TREE)((PUCHAR)eProcess + GetVadOffset()); if (!vadRoot || !vadRoot-\u0026gt;Root) { return NULL; // VAD tree is empty or invalid } ULONG64 vadCount = *(PULONG64)((PUCHAR)eProcess + GetVadOffset() + 0x10); PMMVAD vad = (PMMVAD)vadRoot-\u0026gt;Root; if (!MmIsAddressValid(vad)) { return NULL; } EnumVad(vad); } PVOID LockPageProction(PEPROCESS eProcess, ULONG64 virtualaddress, PMMVAD vad) { } PVOID RemoveVad(PEPROCESS eProcess, ULONG64 virtualaddress) { PMMVAD vad = MiLocateAddress(eProcess, virtualaddress); if (!MmIsAddressValid(vad)) { return NULL; } PRTL_AVL_TREE vadRoot = (PRTL_AVL_TREE)((PUCHAR)eProcess + GetVadOffset()); if (!vadRoot || !vadRoot-\u0026gt;Root) { return NULL; } RtlAvlRemoveNode(vadRoot, vad); ObReferenceObject(eProcess); } PVOID UnloadDriver( _In_ PDRIVER_OBJECT DriverObject ) { UNREFERENCED_PARAMETER(DriverObject); DbgPrintEx(77, 0, \u0026#34;Driver unloaded successfully.\\n\u0026#34;); return STATUS_SUCCESS; } NTSTATUS DriverEntry( _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath ) { UNREFERENCED_PARAMETER(RegistryPath); DbgPrintEx(77, 0, \u0026#34;Driver loaded successfully.\\n\u0026#34;); //1. 分析内核 MiLocateAddress 这个函数，然后照抄此判断是: 给一个R3地址，返回一个VAD 节点 //2. 给一个进程ID，解析出此进程的所有VAD节点 //3. 代码实现WIN10 WIN11 私有内存锁页 //4. 移除内存所在vad节点的位置 //DbgBreakPoint(); PEPROCESS eproc = NULL; eproc = LookUpProcess(0x16c8); if (!eproc) { return STATUS_UNSUCCESSFUL; } UINT32 vadOffset = GetVadOffset(); if (!vadOffset) { return STATUS_UNSUCCESSFUL; } //1: over PMMVAD vad = MiLocateAddress(eproc, 0xDCE0000); DbgPrintEx(77, 0, \u0026#34;Find Vad: %p\\n\u0026#34;, vad); /* +0x658 VadRoot : _RTL_AVL_TREE +0x660 VadHint : 0xffffce01`8de7d9a0 Void +0x668 VadCount : 0xaa +0x670 VadPhysicalPages : 0 +0x678 VadPhysicalPagesLimit : 0 */ //vadRoot是根节点, vadHint是上一次MiLocateAddress找到的指针, vadCount是vad的数量 //2: over ParserProcessVad(eproc); //3. over RemoveVad(eproc, 0xDCE0000); ObDereferenceObject(eproc); DriverObject-\u0026gt;DriverUnload = UnloadDriver; return STATUS_SUCCESS; } VAD映射内存 Win10锁页 插入一个锁页的知识点, win10和win7有差别, 主要还是看win10, 直接看一下MmProtectVirtualMemory这个函数, 可以看到如果满足这两个逻辑的话, 就会返回失败\n测试一个, 用CE申请了一块内存, 看一下对应的 +0x30的位置, 因为上面的\u0026amp; 0x3F800可以用不用考虑, 因为这个参数可以用的属性加起来也不会超过0x800所以这里为0, 那么我们让这个位置 Core.u.LongFlags \u0026amp; 0x1100000 == 0x1100000 就可以了\n可以发现Graphics: 0y1 PrivateMemoryAlwaysSet: 0y1这个两个位置为1即可\n代码实现:\nPVOID LockVadProction(PEPROCESS eProcess, ULONG64 virtualaddress) { PMMVAD_SHORT vad = MiLocateAddress(eProcess, virtualaddress); if (!MmIsAddressValid(vad)) { return NULL; } vad-\u0026gt;u.PrivateVadFlags.Graphics = 0x1; vad-\u0026gt;u.PrivateVadFlags.PrivateMemoryAlwaysSet = 0x1; } 这样这个内存的页就不能被修改属性了\n映射内存 找一个map的内存看一下, MMVAD_SHORT的结构\nX64页表 页帧\n物理页是有一个地方去管理，管理的时候用的是数组，没有用链表，因为数组的查找很快，因为物理地址是频繁运行，所以必须有一个很快的算法 有一个这样的数组叫做：mmpfndatabase, 数组里的每一个元素都是mmpfn结构,\n数组的索引, pte的页帧 \u0026mdash;\u0026gt; 某些属性 + 页帧 + 属性\nmmpfndatabase[pte.页帧]\nx64分页\nx64 获取PTEbase\n#include \u0026lt;ntifs.h\u0026gt; ULONG64 g_PteAddress = 0; ULONG64 g_PdeAddress = 0; ULONG64 g_PpeAddress = 0; ULONG64 g_PxeAddress = 0; ULONG64 GetPteAddress(ULONG64 Address) { return (ULONG64)(((Address \u0026gt;\u0026gt; 9) \u0026amp; 0x7FFFFFFFF8) + g_PteAddress); } ULONG64 GetPdeAddress(ULONG64 Address) { return (ULONG64)(((Address \u0026gt;\u0026gt; 9) \u0026amp; 0x7FFFFFFFF8) + g_PteAddress); } ULONG64 GetPpeAddress(ULONG64 Address) { return (ULONG64)(((Address \u0026gt;\u0026gt; 9) \u0026amp; 0x7FFFFFFFF8) + g_PteAddress); } ULONG64 GetPxeAddress(ULONG64 Address) { return (ULONG64)(((Address \u0026gt;\u0026gt; 9) \u0026amp; 0x7FFFFFFFF8) + g_PteAddress); } ULONG64 GetPTEBASE() { ULONG64 DirectoryTableBase = *(PULONG64)((PUCHAR)PsInitialSystemProcess + 0x28); //后12位属性 DirectoryTableBase \u0026amp;= ~0xFFF; PHYSICAL_ADDRESS address; address.QuadPart = DirectoryTableBase; PULONG64 VirtualDirectorBase = MmGetVirtualForPhysical(address); ULONG64 index = -1; for (size_t i = 0; i \u0026lt; 0x256; i++) { ULONG64 data = VirtualDirectorBase[i]; //8000 0000001aa063 //48 0xFFFFFFFFFFFF //ULONG64 testData = ((data \u0026amp; ~0xFFF) \u0026amp; 0xFFFFFFFFFFFF); if (DirectoryTableBase == ((data \u0026amp; ~0xFFF) \u0026amp; 0xFFFFFFFFFFFF)) { index = i; break; } } if (index != -1) { ULONG64 PTEbase = (index + 0x1FFFE00) \u0026lt;\u0026lt; 0x27; return PTEbase; } return NULL; } VOID DriverUnload(PDRIVER_OBJECT pDriver) { } NTSTATUS DriverEntry(PDRIVER_OBJECT pDriver, PUNICODE_STRING pSeg) { //1. 获取pte的基址 （ MmGetVirtualForPhysical ） //2. 解析 返回PTE PDE PDPTE PML4的地址 ( MmIsAddressValidEx ) //1. over DbgBreakPoint(); g_PteAddress = GetPTEBASE(); g_PdeAddress = GetPdeAddress(g_PteAddress); g_PpeAddress = GetPpeAddress(g_PdeAddress); g_PxeAddress = GetPxeAddress(g_PpeAddress); DbgPrintEx(77, 0, \u0026#34;PTEBASE: %p\\n\u0026#34;, g_PteAddress); DbgPrintEx(77, 0, \u0026#34;PDEBASE: %p\\n\u0026#34;, g_PdeAddress); DbgPrintEx(77, 0, \u0026#34;PPEBASE: %p\\n\u0026#34;, g_PpeAddress); DbgPrintEx(77, 0, \u0026#34;PXEBASE: %p\\n\u0026#34;, g_PxeAddress); //2. over ULONG64 gdtr = 0xfffff80051d20fb0; ULONG64 gdtrPte = GetPteAddress(gdtr); ULONG64 gdtrPde = GetPdeAddress(gdtrPte); ULONG64 gdtrPpe = GetPpeAddress(gdtrPde); ULONG64 gdtrPxe = GetPxeAddress(gdtrPpe); DbgPrintEx(77, 0, \u0026#34;gdtrPte: %p\\n\u0026#34;, gdtrPte); DbgPrintEx(77, 0, \u0026#34;gdtrPde: %p\\n\u0026#34;, gdtrPde); DbgPrintEx(77, 0, \u0026#34;gdtrPpe: %p\\n\u0026#34;, gdtrPpe); DbgPrintEx(77, 0, \u0026#34;gdtrPxe: %p\\n\u0026#34;, gdtrPxe); pDriver-\u0026gt;DriverUnload = DriverUnload; return STATUS_SUCCESS; } PTE的原型 ","permalink":"https://l0x1c.com/posts/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","summary":"VAD_私有内存 私有内存 像malloc, virtualalloc申请的内存都是私有内存, MapViewofFile, MapViewOfSize, mdl, 这种是映射的内存\n这些内存是由一个叫做vadroot的节点来管理的, 可以看一下这个位置 这里如果后续想获取到这个位置的话, 因为每个版本的偏移可能不一样, 可以通过函数PsGetProcessExitStatus来获取对应的偏移 + 4就是vadRoot win10上的结构\n+0x658 VadRoot : _RTL_AVL_TREE +0x660 VadHint : 0xffff900f`4bf43e10 Void +0x668 VadCount : 0xde VadRoot: _RTL_AVL_TREE 里面就是代表了二叉搜索树的节点, 而里面的每个节点的结构都是__MMVAD的结构, VadHint多次查询的节点会放在这里, VadCount代表vad节点的个数\nkd\u0026gt; dt _RTL_AVL_TREE ffff900f4c129400+0x658 nt!_RTL_AVL_TREE +0x000 Root : 0xffff900f`4bf44810 _RTL_BALANCED_NODE kd\u0026gt; dt 0xffff900f`4bf44810 _RTL_BALANCED_NODE nt!_RTL_BALANCED_NODE +0x000 Children : [2] 0xffff900f`4b1dcb10 _RTL_BALANCED_NODE +0x000 Left : 0xffff900f`4b1dcb10 _RTL_BALANCED_NODE +0x008 Right : 0xffff900f`4bfe65c0 _RTL_BALANCED_NODE +0x010 Red : 0y0 +0x010 Balance : 0y00 +0x010 ParentValue : 0 !","title":"内存管理"},{"content":"这周主要看了一下minifilter的东西, 网吧, 杀软, 反作弊都会相应的用到这个\nminifilter_Nt启动 ","permalink":"https://l0x1c.com/posts/minifilter/","summary":"这周主要看了一下minifilter的东西, 网吧, 杀软, 反作弊都会相应的用到这个\nminifilter_Nt启动 ","title":"minifilter"},{"content":"很久没打ctf了, 正好碰见周末有一点空, 就看了一下d3ctf和windows相关的题目\nlocked-door 加的是vmp的壳子, 需要调试的话直接用TitanHide - \u0026gt; https://github.com/mrexodia/TitanHide就可以调试起来, download后自行加个签名即可, 发现题目有两个bin文件, 直接可以得到的思路是先dump, 因为一定要读取文件一定会调用readfile, 所以可以根据回溯找到关键位置进行调试 通过readfile回溯已经找到了关键位置, 然后用过函数特征入口点来dump, 正常编程的也就那几个软件, 这个问题在之前我发过看雪的文章可以看一下, 可以看到这里很像入口点了, 看一个正常vs编译出来的程序 比较后可以看很像入口点的位置, 直接dump设置oep, 这样dump后的逻辑就很清晰了 可以看到一个算法, 本身程序对他们的校验的算法是一样的 加密完的数据进行evp的校验 校验过了后才可以走到正确的流程, 参数是key+加密的bin里的data, 那直接替换一下, 就可以得到flag了 d3rpg-revenge 这是一个游戏, 正好我是一个游戏安全的从业者, 直接打开ce开始干, 进入一个房间后, 他让我输入密码, 那么可以对密码的位置进行访问断点, 可以看到可以被很好的断下来 d3rpg.dll+50DEA这里的地址, 这个字符串很可疑, 去搜一下 module Scene_RPG class Secret_Class DELTA = | (($de1ta + 1) * 0xf0000000) def initialize(new_key) @key = str_to_longs(new_key) if @key.length \u0026lt; 4 @key.length.upto(4) { |i| @key[i] = 0 } end end def self.str_to_longs(s, include_count = false) s = s.dup length = s.length ((4 - s.length % 4) \u0026amp; 3).times { s \u0026lt;\u0026lt; \u0026#34;\\0\u0026#34; } unpacked = s.unpack(\u0026#39;V*\u0026#39;).collect { |n| int32 n } unpacked \u0026lt;\u0026lt; length if include_count unpacked end def str_to_longs(s, include_count = false) self.class.str_to_longs s, include_count end def self.longs_to_str(l, count_included = false) s = l.pack(\u0026#39;V*\u0026#39;) s = s[0...(l[-1])] if count_included s end def longs_to_str(l, count_included = false) self.class.longs_to_str l, count_included end def self.int32(n) n -= 4_294_967_296 while (n \u0026gt;= 2_147_483_648) n += 4_294_967_296 while (n \u0026lt;= -2_147_483_648) n.to_i end def int32(n) self.class.int32 n end def mx(z, y, sum, p, e) int32( ((z \u0026gt;\u0026gt; 5 \u0026amp; 0x07FFFFFF) ^ (y \u0026lt;\u0026lt; 2)) + ((y \u0026gt;\u0026gt; 3 \u0026amp; 0x1FFFFFFF) ^ (z \u0026lt;\u0026lt; 4)) ) ^ int32((sum ^ y) + (@key[(p \u0026amp; 3) ^ e] ^ z)) end def self.encrypt(key, plaintext) self.new(key).encrypt(plaintext) end def encrypt(plaintext) return \u0026#39;\u0026#39; if plaintext.length == 0 v = str_to_longs(plaintext, true) v[1] = 0 if v.length == 1 n = v.length - 1 z = v[n] y = v[0] q = (6 + 52 / (n + 1)).floor sum = $de1ta * DELTA p = 0 while(0 \u0026lt;= (q -= 1)) do sum = int32(sum + DELTA) e = sum \u0026gt;\u0026gt; 2 \u0026amp; 3 n.times do |i| y = v[i + 1]; z = v[i] = int32(v[i] + mx(z, y, sum, i, e)) p = i end p += 1 y = v[0]; z = v[p] = int32(v[p] + mx(z, y, sum, p, e)) end longs_to_str(v).unpack(\u0026#39;a*\u0026#39;).pack(\u0026#39;m\u0026#39;).delete(\u0026#34;\\n\u0026#34;) end def self.decrypt(key, ciphertext) self.new(key).decrypt(ciphertext) end end end def validate_flag(input_flag) c_flag = input_flag + \u0026#34;\\0\u0026#34; result = $check_flag.call(c_flag) result == 1 end def check flag = $game_party.actors[0].name key = Scene_RPG::Secret_Class.new(\u0026#39;rpgmakerxp_D3CTF\u0026#39;) cyphertext = key.encrypt(flag) if validate_flag(cyphertext) $game_variables[1] = 100 else $game_variables[1] = 0 end end def check1 flag = $game_party.actors[0].name if flag == \u0026#34;ImPsw\u0026#34; $game_variables[2] = 100 else $game_variables[2] = 0 end end 直接写python解密即可\nfrom regadgets import * data = decode_b64(\u0026#39;LhVvfepywFIsHb8G8kNdu49J3k0=\u0026#39;) key = b\u0026#39;rpgmakerxp_D3CTF\u0026#39; #xxtea decode data = xxtea_decrypt(data, key, delta=0xf1919810) print(data) #Y0u_R_RPG_M4st3r ","permalink":"https://l0x1c.com/posts/d3ctf_writeup/","summary":"很久没打ctf了, 正好碰见周末有一点空, 就看了一下d3ctf和windows相关的题目\nlocked-door 加的是vmp的壳子, 需要调试的话直接用TitanHide - \u0026gt; https://github.com/mrexodia/TitanHide就可以调试起来, download后自行加个签名即可, 发现题目有两个bin文件, 直接可以得到的思路是先dump, 因为一定要读取文件一定会调用readfile, 所以可以根据回溯找到关键位置进行调试 通过readfile回溯已经找到了关键位置, 然后用过函数特征入口点来dump, 正常编程的也就那几个软件, 这个问题在之前我发过看雪的文章可以看一下, 可以看到这里很像入口点了, 看一个正常vs编译出来的程序 比较后可以看很像入口点的位置, 直接dump设置oep, 这样dump后的逻辑就很清晰了 可以看到一个算法, 本身程序对他们的校验的算法是一样的 加密完的数据进行evp的校验 校验过了后才可以走到正确的流程, 参数是key+加密的bin里的data, 那直接替换一下, 就可以得到flag了 d3rpg-revenge 这是一个游戏, 正好我是一个游戏安全的从业者, 直接打开ce开始干, 进入一个房间后, 他让我输入密码, 那么可以对密码的位置进行访问断点, 可以看到可以被很好的断下来 d3rpg.dll+50DEA这里的地址, 这个字符串很可疑, 去搜一下 module Scene_RPG class Secret_Class DELTA = | (($de1ta + 1) * 0xf0000000) def initialize(new_key) @key = str_to_longs(new_key) if @key.length \u0026lt; 4 @key.length.upto(4) { |i| @key[i] = 0 } end end def self.","title":"D3CTF-WriteUp"},{"content":"初步分析 分析到一个E语言的外挂, 但是说的是过检测的外挂, 分析一下, 直接ida一把梭大概看到有用的信息, 内部测试3-A.exe explorer.exe 打开外挂后看到的功能大概有这几个, 加载过检, 开始过检, 伪装进程, 隐藏进程这几个, 大概就能猜到肯定用到了驱动 跑起来后, 第一个功能是开始过检测, 发现修改了R3层的应用层访问的状态为拒绝 直接打开process explorer, 可以发现进程的Protection属性变成了PsProtectedSignerWinTcb-Light, 这里的保护和今年的腾讯游戏安全初赛的那个是一样的PPL 直接windbg看一下进程的EPROCESS结构, 可以看到Protection为0x61 -\u0026gt; 0110 0001b, 可以看到修改的为PsProtectedTypeProtectedLight,PsProtectedSignerWinTcb\n//进程保护类型 typedef enum _PS_PROTECTED_TYPE { PsProtectedTypeNone = 0, PsProtectedTypeProtectedLight = 1, PsProtectedTypeProtected = 2 } PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE; //Audit 审计标志（很少使用） //Signer 签名了进程 typedef enum _PS_PROTECTED_SIGNER { PsProtectedSignerNone = 0, PsProtectedSignerAuthenticode, PsProtectedSignerCodeGen, PsProtectedSignerAntimalware, PsProtectedSignerLsa, PsProtectedSignerWindows, PsProtectedSignerWinTcb, PsProtectedSignerWinSystem, PsProtectedSignerApp, PsProtectedSignerMax } PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER; 直接把这个位置修改为0即可\nCmRegisterCallback 直接开始分析一下这个东西具体都干什么了吧, 可以打开了解到这个是一个E语言的东西, 并且他一定是有一个通信码在和什么东西通信的, 因为有一个点击事件, 直接ida开始分析, 打开后直接可以看到了一个地址，R3反正也是通信做的, 大部分功能应该是在驱动里，直接去驱动分析看一下 发现直接download可以的, 发现这个东西在疯狂套娃, ExAllocatePoolWithTag后创建一个系统线程, 线程的入口点就是申请的内存的位置, 由这个sys中藏的一个PE的oep的位置开始执行 直接双机调试开始搞一下, 还是老地方ioploaddriver, 直接下断释放的函数可以看到这个位置是一个PE 在StartRoutine下断看一下主要在做什么 经过分析后, 可以分析到它通过设置CmRegisterCallback注册表回调, 把代码放在这里开始执行用于隐藏自己的驱动代码 分析BE的时候发现实际上是有对这种情况进行检测的, BE中分别对进程线程回调, 以及注册表回调判断回调函数的其实位置是不是被hook, 是不是jmp reg的跳转来判断是不是有问题 直接打开BE逆向发现他取了CmUnRegisterCallback的特征, 因为这里存有相应的表, 里面存放了相对的地址和cookie\nlea rdx, [rsp+38h] lea rcx, [ntkrnlmp!CallbackListHead (fffff8015ea60920)] 直接跑通, 写个代码测试一下可不可以找到相应的位置\n#include \u0026lt;ntddk.h\u0026gt; PVOID GetCmCallbackListHead() { UNICODE_STRING ustr; RtlInitUnicodeString(\u0026amp;ustr, L\u0026#34;CmUnRegisterCallback\u0026#34;); PUCHAR pBase = (PUCHAR)MmGetSystemRoutineAddress(\u0026amp;ustr); if (!pBase) return NULL; for (PUCHAR p = pBase; p \u0026lt; pBase + 0x1000; ++p) { if (!MmIsAddressValid(p) || !MmIsAddressValid(p + 6)) continue; if (p[0] == 0x48 \u0026amp;\u0026amp; p[1] == 0x8D \u0026amp;\u0026amp; p[2] == 0x0D \u0026amp;\u0026amp; p[-5] == 0x48 \u0026amp;\u0026amp; p[-4] == 0x8D \u0026amp;\u0026amp; p[-3] == 0x54) { INT32 disp = *(INT32*)(p + 3); UINT64 off = 0; if (disp \u0026lt;= 0) off = (UINT32)disp | 0xFFFFFFFF00000000ull; else off = (UINT32)disp; PUCHAR pListHead = p + off + 7; if (MmIsAddressValid(pListHead)) return pListHead; } } return NULL; } extern USHORT NtBuildNumber; void DumpCmRegisterCallback() { PVOID pListHead = GetCmCallbackListHead(); //DbgBreakPoint(); if (!pListHead) { DbgPrint(\u0026#34;[-] CallbackListHead not found!\\n\u0026#34;); return; } char* Head = (char*)pListHead; char* Entry = *(char**)Head; int idx = 0; ULONG_PTR Offset = 8; // Win7 SP1及以上偏移 if (NtBuildNumber \u0026lt;= 7600) Offset = 0; // Win7 RTM及以下偏移 while (Entry \u0026amp;\u0026amp; Entry != Head \u0026amp;\u0026amp; MmIsAddressValid(Entry)) { char* p = Entry + Offset; ULONGLONG CallbackAddr = *((ULONGLONG*)p + 5); ULONGLONG Cookie = *((ULONGLONG*)p + 3); if (CallbackAddr \u0026gt;= 0x8000000000000000ull \u0026amp;\u0026amp; MmIsAddressValid((PVOID)CallbackAddr)) DbgPrint(\u0026#34;[CMCallback %d] Callback: %p Cookie: %llx\\n\u0026#34;, idx, (PVOID)CallbackAddr, Cookie); Entry = *(char**)Entry; if (++idx \u0026gt; 64) break; // 防止死循环 } } VOID DriverUnload(PDRIVER_OBJECT pDriver) { DbgPrint(\u0026#34;Unload called!\\n\u0026#34;); } NTSTATUS DriverEntry(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg) { DbgPrint(\u0026#34;Driver Loaded\\n\u0026#34;); pDriver-\u0026gt;DriverUnload = DriverUnload; //DbgBreakPoint(); DumpCmRegisterCallback(); return STATUS_SUCCESS; } 可以找到相应的位置, 这里的check的就是模块的头部是jmp reg, 并且reg过去的地址是无模块地址 相应的BE的检测的伪代码 开始过检按钮 相应的回调的位置的check已经可以搞定, 继续分析点击过检测的时候一定会和驱动层进行通信, 直接在这个位置下断即可 点击开始过检, 可以知道流程为控制码0822 -\u0026gt; 0814, 调试可以知道这里通过获取到Protection的offset获取的分别是自己本身的程序和smss.exe的Protection属性进行了交换\nPROCESS ffffc081d05ab080 SessionId: 1 Cid: 1010 Peb: e9f5789000 ParentCid: 0e34 DirBase: 1406a002 ObjectTable: ffff9d8e2a8f2c80 HandleCount: 47. Image: A.exe PROCESS ffffc081cd7634c0 SessionId: none Cid: 0208 Peb: 843a07b000 ParentCid: 0004 DirBase: 136b7b002 ObjectTable: ffff9d8e1f3768c0 HandleCount: 53. Image: smss.exe 因为smss.exe的EPROCESS他获取了后, 可以拿到该进程的保护属性和父进程的pid, 第二个操作就是交换了父进程的pid, 可以看到InheritedFromUniqueProcessId等于了4 取消就是explorer.exe的ParentCid和Protection赋值给了该被保护的程序 伪装进程按钮 获取自身和另一个进程的名字, 把名字复制到被保护的进程里 可以看到名字已经被修改成了explorer.exe 主要这个模块处理了很多peb里的信息这里省略一下有点多, github有一个比较好的项目很像这个模块https://github.com/zhuhuibeishadiao/PathModification\n进程隐藏按钮 发现比较有趣的事情, 好像ydark还是可以扫描到这个被隐藏的进程, 但是任务管理器的没了 看一下他是怎么做的, 他直接把+0x2e8 UniqueProcessId : (null)清空了, 所以任务管理器看不见 但是ydark为什么能看见, 研究了一下是通过句柄表来做的进程的遍历, 可以使用PspCidTable来做这个事情\n遍历PspCidTable枚举进程 PspCidTable这个位置需要通过特征码匹配来看一下是什么值 通过PsLookupProcessByProcessId的E8 call获取到地址后, 直接dq看一下, 这里大概说一下思路和找寻的方法, 代码就不贴了 dq pspcidtable获取了表的地址后, 实际上的类型是_HANDLE_TABLE类型, 可以看到tablecode的低两位代表句柄表的层数, 最多有三层 随便进一个看一下, 可以看到是加密的情况 win10的解密是\u0026gt;\u0026gt; 0x10 \u0026amp; 0xfffffffffffffff0 解密后看一下EPROCESS, 发现是第一个的system 通过这个就可以遍历出id和对应的object, 但是如果要遍历进程的, 还要进行筛选需要知道一个东西叫做OBJECT_TYPE和OBJECT_HEADER, 实际上OBJECT_HEADER是在EPROCESS结构上面的\nkd\u0026gt; dt _OBJECT_HEADER nt!_OBJECT_HEADER +0x000 PointerCount : Int8B +0x008 HandleCount : Int8B +0x008 NextToFree : Ptr64 Void +0x010 Lock : _EX_PUSH_LOCK +0x018 TypeIndex : UChar +0x019 TraceFlags : UChar +0x019 DbgRefTrace : Pos 0, 1 Bit +0x019 DbgTracePermanent : Pos 1, 1 Bit +0x01a InfoMask : UChar +0x01b Flags : UChar +0x01b NewObject : Pos 0, 1 Bit +0x01b KernelObject : Pos 1, 1 Bit +0x01b KernelOnlyAccess : Pos 2, 1 Bit +0x01b ExclusiveObject : Pos 3, 1 Bit +0x01b PermanentObject : Pos 4, 1 Bit +0x01b DefaultSecurityQuota : Pos 5, 1 Bit +0x01b SingleHandleEntry : Pos 6, 1 Bit +0x01b DeletedInline : Pos 7, 1 Bit +0x01c Reserved : Uint4B +0x020 ObjectCreateInfo : Ptr64 _OBJECT_CREATE_INFORMATION +0x020 QuotaBlockCharged : Ptr64 Void +0x028 SecurityDescriptor : Ptr64 Void +0x030 Body : _QUAD 那么windbg看一下这个结构, 判断类型主要的还是这个TypeIndex 这里的解密可以看一下ObGetObjectType 那么实际上的解密就是0xfa ^ 0x8f ^ 0x72 = 0x7 按照这个思路写的代码效果如下: ","permalink":"https://l0x1c.com/posts/dg-pass_anti%E5%88%86%E6%9E%90/","summary":"初步分析 分析到一个E语言的外挂, 但是说的是过检测的外挂, 分析一下, 直接ida一把梭大概看到有用的信息, 内部测试3-A.exe explorer.exe 打开外挂后看到的功能大概有这几个, 加载过检, 开始过检, 伪装进程, 隐藏进程这几个, 大概就能猜到肯定用到了驱动 跑起来后, 第一个功能是开始过检测, 发现修改了R3层的应用层访问的状态为拒绝 直接打开process explorer, 可以发现进程的Protection属性变成了PsProtectedSignerWinTcb-Light, 这里的保护和今年的腾讯游戏安全初赛的那个是一样的PPL 直接windbg看一下进程的EPROCESS结构, 可以看到Protection为0x61 -\u0026gt; 0110 0001b, 可以看到修改的为PsProtectedTypeProtectedLight,PsProtectedSignerWinTcb\n//进程保护类型 typedef enum _PS_PROTECTED_TYPE { PsProtectedTypeNone = 0, PsProtectedTypeProtectedLight = 1, PsProtectedTypeProtected = 2 } PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE; //Audit 审计标志（很少使用） //Signer 签名了进程 typedef enum _PS_PROTECTED_SIGNER { PsProtectedSignerNone = 0, PsProtectedSignerAuthenticode, PsProtectedSignerCodeGen, PsProtectedSignerAntimalware, PsProtectedSignerLsa, PsProtectedSignerWindows, PsProtectedSignerWinTcb, PsProtectedSignerWinSystem, PsProtectedSignerApp, PsProtectedSignerMax } PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER; 直接把这个位置修改为0即可\nCmRegisterCallback 直接开始分析一下这个东西具体都干什么了吧, 可以打开了解到这个是一个E语言的东西, 并且他一定是有一个通信码在和什么东西通信的, 因为有一个点击事件, 直接ida开始分析, 打开后直接可以看到了一个地址，R3反正也是通信做的, 大部分功能应该是在驱动里，直接去驱动分析看一下 发现直接download可以的, 发现这个东西在疯狂套娃, ExAllocatePoolWithTag后创建一个系统线程, 线程的入口点就是申请的内存的位置, 由这个sys中藏的一个PE的oep的位置开始执行 直接双机调试开始搞一下, 还是老地方ioploaddriver, 直接下断释放的函数可以看到这个位置是一个PE 在StartRoutine下断看一下主要在做什么 经过分析后, 可以分析到它通过设置CmRegisterCallback注册表回调, 把代码放在这里开始执行用于隐藏自己的驱动代码 分析BE的时候发现实际上是有对这种情况进行检测的, BE中分别对进程线程回调, 以及注册表回调判断回调函数的其实位置是不是被hook, 是不是jmp reg的跳转来判断是不是有问题 直接打开BE逆向发现他取了CmUnRegisterCallback的特征, 因为这里存有相应的表, 里面存放了相对的地址和cookie","title":"关于CmRegisterCallback的检测/windows进程隐藏的问题"},{"content":"About Profile ctfer@W\u0026amp;M (Intern) Feiyu Security (2020.8 ~2020.9) (Intern) Virus Analysis Engineer@sangfor (2020.9 ~ 2021.5) Security Enginner@QiAnXin (2021.7 ~ 2024.1) Anti-cheat Engineer@Tencent GameSecurity Interest Cybersecurity Binary Play Game Contact L0x1c3r (at) gmail (dot) com\n","permalink":"https://l0x1c.com/about/","summary":"About Profile ctfer@W\u0026amp;M (Intern) Feiyu Security (2020.8 ~2020.9) (Intern) Virus Analysis Engineer@sangfor (2020.9 ~ 2021.5) Security Enginner@QiAnXin (2021.7 ~ 2024.1) Anti-cheat Engineer@Tencent GameSecurity Interest Cybersecurity Binary Play Game Contact L0x1c3r (at) gmail (dot) com","title":""}]